import React, { useState, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth';
import './SlotsGame.css';

// --- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
// –®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É —Å–Ω–∏–∂–µ–Ω—ã –∑–∞ —Å—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
const symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üçâ', '‚≠ê', '7Ô∏è‚É£', 'üçí', 'üçã', 'üçä', 'üçá', 'üçí', 'üçã'];
const reelCount = 7;
const visibleSymbols = 5; // –¢–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 5 —Å–∏–º–≤–æ–ª–æ–≤

// –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç: [—Å–∏–º–≤–æ–ª]: { [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π]: –º–Ω–æ–∂–∏—Ç–µ–ª—å_—Å—Ç–∞–≤–∫–∏ }
const payouts: { [key: string]: { [count: number]: number } } = {
    'üçí': { 3: 2, 4: 5, 5: 10, 6: 20, 7: 50 },
    'üçã': { 3: 2, 4: 5, 5: 10, 6: 20, 7: 50 },
    'üçä': { 3: 3, 4: 8, 5: 15, 6: 30, 7: 75 },
    'üçá': { 3: 3, 4: 8, 5: 15, 6: 30, 7: 75 },
    'üçâ': { 3: 5, 4: 10, 5: 25, 6: 50, 7: 100 },
    '‚≠ê': { 3: 10, 4: 25, 5: 50, 6: 100, 7: 250 },
    '7Ô∏è‚É£': { 3: 20, 4: 50, 5: 100, 6: 250, 7: 500 },
};

// –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ª–µ–Ω—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
const createReelStrip = (length = 50) => {
    return Array.from({ length }, () => symbols[Math.floor(Math.random() * symbols.length)]);
};

const SlotsGame: React.FC = () => {
    const { user } = useAuth();
    const [balance, setBalance] = useState(user?.CPN || 1000);
    const [betAmount, setBetAmount] = useState(10);
    const [reels, setReels] = useState<string[][]>(() => Array(reelCount).fill(Array(visibleSymbols).fill('‚ùì')));
    const [spinning, setSpinning] = useState(false);
    const [message, setMessage] = useState('Place your bet and spin!');
    const [superGameProgress, setSuperGameProgress] = useState(0);
    const [freeSpins, setFreeSpins] = useState(0);

    const handleSpin = () => {
        if (freeSpins === 0 && betAmount > balance) {
            setMessage("Insufficient balance!");
            return;
        }

        if (freeSpins > 0) {
            setFreeSpins(prev => prev - 1);
        } else {
            setBalance(prev => prev - betAmount);
        }
        
        setSpinning(true);
        setMessage('Spinning...');

        const reelStrips = Array.from({ length: reelCount }, () => createReelStrip());

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setReels(reelStrips);

        setTimeout(() => {
            const finalReels: string[][] = [];
            for (let i = 0; i < reelCount; i++) {
                // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–µ–Ω—Ç–µ - —ç—Ç–æ –Ω–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const resultStrip = reelStrips[i].slice(-visibleSymbols);
                finalReels.push(resultStrip);
            }
            setReels(finalReels);
            setSpinning(false);
            calculateWinnings(finalReels);
        }, 3000); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    };

    const calculateWinnings = (finalReels: string[][]) => {
        const centerLine = finalReels.map(reel => reel[Math.floor(visibleSymbols / 2)]); // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è 5 —Å–∏–º–≤–æ–ª–æ–≤ (–∏–Ω–¥–µ–∫—Å 2)
        const counts: { [key: string]: number } = {};
        
        for (const symbol of centerLine) {
            counts[symbol] = (counts[symbol] || 0) + 1;
        }

        let winAmount = 0;
        let winMessage = 'You lose. Try again!';

        for (const symbol in counts) {
            const count = counts[symbol];
            if (payouts[symbol] && payouts[symbol][count]) {
                const multiplier = payouts[symbol][count];
                winAmount = betAmount * multiplier;
                winMessage = `Win! ${count} x ${symbol} pays ${winAmount} CPN!`;
                break; // –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –æ–¥–Ω—É –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            }
        }

        if (winAmount > 0) {
            setBalance(prev => prev + winAmount);
            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∫–∞–ª—É —Å—É–ø–µ—Ä-–∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ—Ä–∏—Å–ø–∏–Ω
            if (freeSpins <= 0) {
                updateSuperGame(winAmount, betAmount);
            }
        }
        setMessage(winMessage);
    };

    const updateSuperGame = (winAmount: number, currentBet: number) => {
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—ã–∏–≥—Ä—ã—à–∞. –í—ã–∏–≥—Ä—ã—à x10 –¥–∞–µ—Ç 10% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        const progressToAdd = (winAmount / currentBet);
        
        setSuperGameProgress(prev => {
            const newProgress = prev + progressToAdd;
            if (newProgress >= 100) {
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—É–ø–µ—Ä-–∏–≥—Ä—É: –¥–∞–µ–º 10 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤
                setMessage("SUPER GAME! You won 10 Freespins!");
                setFreeSpins(10);
                return 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∫–∞–ª—É
            }
            return newProgress;
        });
    };

    const handleBetAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = parseInt(e.target.value) || 1;
        const clampedValue = Math.max(1, Math.min(value, 500)); // –ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞ 500
        setBetAmount(clampedValue);
    };

    return (
        <div className="slots-game">
            <div className="slots-display">
                <div className="reels-container">
                    {reels.map((reel, reelIndex) => (
                        <div key={reelIndex} className="reel">
                            <div className={`reel-strip ${spinning ? 'spinning' : ''}`}>
                                {reel.map((symbol, symbolIndex) => (
                                    <div key={symbolIndex} className="symbol">
                                        {symbol}
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
                <div className="win-line"></div>
            </div>

            <div className="super-game-bar-container">
                <span>Super Game</span>
                <div className="bar-background">
                    <div className="bar-progress" style={{ width: `${superGameProgress}%` }}></div>
                </div>
                <span>{Math.floor(superGameProgress)}%</span>
            </div>

            <div className="game-message">{message}</div>

            <div className="controls">
                <div className="balance-info">
                    <span>Balance: {balance} CPN</span>
                    {freeSpins > 0 && <span className="freespins-info">Freespins: {freeSpins}</span>}
                </div>
                <div className="betting-controls">
                    <input
                        type="number"
                        value={betAmount}
                        onChange={handleBetAmountChange}
                        disabled={spinning || freeSpins > 0}
                    />
                    <button onClick={handleSpin} disabled={spinning}>
                        {spinning ? 'Spinning...' : (freeSpins > 0 ? `Free Spin (${freeSpins})` : 'Spin')}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default SlotsGame;
