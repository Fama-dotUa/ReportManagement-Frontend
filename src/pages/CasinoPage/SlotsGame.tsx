import React, { useState, useEffect } from 'react';
// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ useAuth
import { usePlayerStats } from './PlayerStatsContext'; 
import './SlotsGame.css';

// --- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
// –®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –∏–∑–º–µ–Ω–µ–Ω—ã, —á–∞—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã —Å–¥–µ–ª–∞–Ω—ã —Ä–µ–∂–µ
const symbols = [
    // –†–µ–¥–∫–∏–µ
    '7Ô∏è‚É£', '‚≠ê',
    // –ù–µ—á–∞—Å—Ç—ã–µ
    'üçâ', 'üçá', 'üçä', 'üçâ', 'üçá', 'üçä','üçâ', 'üçá',
    // –ß–∞—Å—Ç—ã–µ
    'üçã', 'üçí', 'üçã', 'üçí', 'üçã', 'üçí', 'üçã', 'üçí', 'üçã', 'üçí', 'üçä', 'üçí', 'üçä',
];
const reelCount = 7;
const visibleSymbols = 5; 

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º x10
// –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
const payouts: { [key: string]: { [count: number]: number } } = {
    'üçí': { 3: 1.1, 4: 1.2, 5: 1.3, 6: 1.4, 7: 1.5 },
    'üçã': { 3: 1.2, 4: 1.4, 5: 1.6, 6: 1.8, 7: 2.0 },
    'üçä': { 3: 1.3, 4: 1.6, 5: 1.9, 6: 2.2, 7: 2.5 },
    'üçá': { 3: 1.5, 4: 2.0, 5: 2.5, 6: 3.0, 7: 3.5 },
    'üçâ': { 3: 1.8, 4: 2.6, 5: 3.2, 6: 3.8, 7: 4.4 },
    '‚≠ê': { 3: 2.0, 4: 2.8, 5: 3.6, 6: 4.4, 7: 5.2 },
    '7Ô∏è‚É£': { 3: 3.0, 4: 4.0, 5: 5.0, 6: 6.0, 7: 10 },
};

// –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ª–µ–Ω—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
const createReelStrip = (length = 50) => {
    return Array.from({ length }, () => symbols[Math.floor(Math.random() * symbols.length)]);
};

const SlotsGame: React.FC = () => {
    // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { balance, updateBalance, addXp } = usePlayerStats();
    
    const [betAmount, setBetAmount] = useState(10);
    const [reels, setReels] = useState<string[][]>(() => Array(reelCount).fill(Array(visibleSymbols).fill('‚ùì')));
    const [spinning, setSpinning] = useState(false);
    const [message, setMessage] = useState('Place your bet and spin!');
    const [superGameProgress, setSuperGameProgress] = useState(0);
    const [freeSpins, setFreeSpins] = useState(0);
    const [isAutoSpin, setIsAutoSpin] = useState(false);
    const [isWinning, setIsWinning] = useState(false);
    // –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –•—Ä–∞–Ω–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [reelIndex, symbolIndex] –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const [winningSymbols, setWinningSymbols] = useState<[number, number][]>([]);

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ-—Å–ø–∏–Ω–∞
    useEffect(() => {
        let autoSpinTimeout: NodeJS.Timeout;
        if (isAutoSpin && !spinning && freeSpins === 0) {
            if (betAmount > balance) {
                setMessage("Insufficient balance for Auto-Spin!");
                setIsAutoSpin(false);
            } else {
                autoSpinTimeout = setTimeout(handleSpin, 2300);
            }
        }
        return () => clearTimeout(autoSpinTimeout);
    }, [isAutoSpin, spinning, balance]);

    const handleSpin = () => {
        if (spinning) return;
        if (freeSpins === 0 && betAmount > balance) {
            setMessage("Insufficient balance!");
            setIsAutoSpin(false); 
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Å–ø–∏–Ω–æ–º
        setWinningSymbols([]);
        if (freeSpins > 0) {
            setFreeSpins(prev => prev - 1);
        } else {
            updateBalance(balance - betAmount);
        }
        
        setSpinning(true);
        setMessage('Spinning...');

        const reelStrips = Array.from({ length: reelCount }, () => createReelStrip());
        setReels(reelStrips);

        setTimeout(() => {
            const finalReels: string[][] = [];
            for (let i = 0; i < reelCount; i++) {
                const resultStrip = reelStrips[i].slice(-visibleSymbols);
                finalReels.push(resultStrip);
            }
            setReels(finalReels);
            setSpinning(false);
            calculateWinnings(finalReels);
        }, 2000); 
    };

    // --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
    // –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–∫–∂–µ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const findConsecutiveSequences = (line: string[]): { symbol: string, count: number, startIndex: number }[] => {
        if (line.length === 0) return [];

        const sequences: { symbol: string, count: number, startIndex: number }[] = [];
        let currentSymbol = line[0];
        let currentCount = 1;
        let startIndex = 0;

        for (let i = 1; i < line.length; i++) {
            if (line[i] === currentSymbol) {
                currentCount++;
            } else {
                sequences.push({ symbol: currentSymbol, count: currentCount, startIndex });
                currentSymbol = line[i];
                currentCount = 1;
                startIndex = i;
            }
        }
        sequences.push({ symbol: currentSymbol, count: currentCount, startIndex });

        return sequences;
    };

    // --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê –í–´–ò–ì–†–´–®–ï–ô –°–û –í–°–ï–ú–ò –î–ò–ê–ì–û–ù–ê–õ–Ø–ú–ò ---
    const calculateWinnings = (finalReels: string[][]) => {
        const effectiveBet = freeSpins > 0 ? 5 : betAmount;
        let totalMultiplier = 0;
        const winMessages: string[] = [];
        let winningCombos = 0;
        const newWinningCoords: [number, number][] = [];

        // --- 1. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
        const centerLine = finalReels.map(reel => reel[Math.floor(visibleSymbols / 2)]);
        const horizontalSequences = findConsecutiveSequences(centerLine);
        for (const seq of horizontalSequences) {
            if (payouts[seq.symbol] && payouts[seq.symbol][seq.count]) {
                totalMultiplier += payouts[seq.symbol][seq.count];
                winMessages.push(`${seq.count} x ${seq.symbol} (H)`);
                winningCombos++;
                for (let i = 0; i < seq.count; i++) {
                    newWinningCoords.push([seq.startIndex + i, Math.floor(visibleSymbols / 2)]);
                }
            }
        }

        // --- 2. –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
        finalReels.forEach((reel, reelIndex) => {
            const verticalSequences = findConsecutiveSequences(reel);
            for (const seq of verticalSequences) {
                if (payouts[seq.symbol] && payouts[seq.symbol][seq.count] && seq.count >= 3) {
                    totalMultiplier += payouts[seq.symbol][seq.count];
                    winMessages.push(`${seq.count} x ${seq.symbol} (V)`);
                    winningCombos++;
                    for (let i = 0; i < seq.count; i++) {
                        newWinningCoords.push([reelIndex, seq.startIndex + i]);
                    }
                }
            }
        });

        // --- 3. –í—Å–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (\) ---
        for (let k = -(visibleSymbols - 1); k < reelCount; k++) {
            const diagLine: string[] = [];
            const diagCoords: [number, number][] = [];
            for (let c = 0; c < reelCount; c++) {
                const r = c - k;
                if (r >= 0 && r < visibleSymbols) {
                    diagLine.push(finalReels[c][r]);
                    diagCoords.push([c, r]);
                }
            }
            if (diagLine.length < 3) continue;

            const diagSequences = findConsecutiveSequences(diagLine);
            for (const seq of diagSequences) {
                if (payouts[seq.symbol] && payouts[seq.symbol][seq.count] && seq.count >= 3) {
                    totalMultiplier += payouts[seq.symbol][seq.count];
                    winMessages.push(`${seq.count} x ${seq.symbol} (D)`);
                    winningCombos++;
                    for (let i = 0; i < seq.count; i++) {
                        newWinningCoords.push(diagCoords[seq.startIndex + i]);
                    }
                }
            }
        }

        // --- 4. –í—Å–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ (/) ---
        for (let k = 0; k < reelCount + visibleSymbols - 1; k++) {
            const antiDiagLine: string[] = [];
            const antiDiagCoords: [number, number][] = [];
            for (let c = 0; c < reelCount; c++) {
                const r = k - c;
                if (r >= 0 && r < visibleSymbols) {
                    antiDiagLine.push(finalReels[c][r]);
                    antiDiagCoords.push([c, r]);
                }
            }
            if (antiDiagLine.length < 3) continue;

            const antiDiagSequences = findConsecutiveSequences(antiDiagLine);
            for (const seq of antiDiagSequences) {
                if (payouts[seq.symbol] && payouts[seq.symbol][seq.count] && seq.count >= 3) {
                    totalMultiplier += payouts[seq.symbol][seq.count];
                    winMessages.push(`${seq.count} x ${seq.symbol} (D)`);
                    winningCombos++;
                    for (let i = 0; i < seq.count; i++) {
                        newWinningCoords.push(antiDiagCoords[seq.startIndex + i]);
                    }
                }
            }
        }

        // --- 5. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç ---
        if (winningCombos > 0) {
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–±–æ
            const uniqueCoords = Array.from(new Set(newWinningCoords.map(JSON.stringify)), JSON.parse);
            setWinningSymbols(uniqueCoords);

            const finalMultiplier = totalMultiplier - (winningCombos > 1 ? (winningCombos - 1) : 0);
            const winAmount = effectiveBet * finalMultiplier;
            const netWin = winAmount - effectiveBet;

            const finalMessage = `Win! ${winMessages.join(' & ')} pays ${winAmount.toFixed(1)} CPN!`;
            setMessage(finalMessage);

            updateBalance(balance - effectiveBet + winAmount);
            if (netWin > 0) {
                addXp(netWin);
            }
            
            setIsWinning(true);
            setTimeout(() => setIsWinning(false), 2000);

            if (freeSpins <= 0) {
                updateSuperGame(winAmount, effectiveBet);
            }
        } else {
            setMessage('You lose. Try again!');
        }
    };

    const updateSuperGame = (winAmount: number, currentBet: number) => {
        const progressToAdd = (winAmount / currentBet) * 2;
        
        setSuperGameProgress(prev => {
            const newProgress = prev + progressToAdd;
            if (newProgress >= 100) {
                setMessage("SUPER GAME! You won 10 Freespins!");
                setFreeSpins(10);
                return 0;
            }
            return newProgress;
        });
    };

    const handleBetAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = parseInt(e.target.value) || 1;
        const clampedValue = Math.max(1, Math.min(value, 250));
        setBetAmount(clampedValue);
    };

    const toggleAutoSpin = () => {
        if (!isAutoSpin && betAmount > balance) {
            setMessage("Insufficient balance to start Auto-Spin!");
            return;
        }
        setIsAutoSpin(!isAutoSpin);
    }

    return (
        <div className="slots-game">
            <div className={`slots-display ${isWinning ? 'win-animation' : ''}`}>
                <div className="reels-container">
                    {reels.map((reel, reelIndex) => (
                        <div key={reelIndex} className="reel">
                            <div className={`reel-strip ${spinning ? 'spinning' : ''}`}>
                                {reel.map((symbol, symbolIndex) => (
                                    <div 
                                        key={symbolIndex} 
                                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'highlight' –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∏–º–≤–æ–ª–∞ –µ—Å—Ç—å –≤ —Å—Ç–µ–π—Ç–µ
                                        className={`symbol ${winningSymbols.some(coord => coord[0] === reelIndex && coord[1] === symbolIndex) ? 'highlight' : ''}`}
                                    >
                                        {symbol}
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
                <div className="win-line"></div>
            </div>

            <div className="super-game-bar-container">
                <span>Super Game</span>
                <div className="bar-background">
                    <div className="bar-progress" style={{ width: `${superGameProgress}%` }}></div>
                </div>
                <span>{Math.floor(superGameProgress)}%</span>
            </div>

            <div className="game-message">{message}</div>

            <div className="controls">
                <div className="balance-info">
                    {/* –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å */}
                    <span>Balance: {balance.toFixed(1)} CPN</span>
                    {freeSpins > 0 && <span className="freespins-info">Freespins: {freeSpins}</span>}
                </div>
                <div className="betting-controls">
                    <input
                        type="number"
                        value={betAmount}
                        onChange={handleBetAmountChange}
                        disabled={spinning || freeSpins > 0 || isAutoSpin}
                    />
                    <button onClick={handleSpin} disabled={spinning || isAutoSpin}>
                        {spinning ? 'Spinning...' : (freeSpins > 0 ? `Free Spin (${freeSpins})` : 'Spin')}
                    </button>
                    <button onClick={toggleAutoSpin} disabled={spinning || freeSpins > 0} className={isAutoSpin ? 'autospin-active' : ''}>
                        {isAutoSpin ? 'Stop Auto' : 'Start Auto'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default SlotsGame;